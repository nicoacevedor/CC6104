puertas_no_elegidas_corr <-puertas_no_elegidas[puertas_no_elegidas != 3]
if(length(puertas_no_elegidas_corr) == 1){
puerta_abierta <- puertas_no_elegidas_corr[1]
}
else{
puerta_abierta <- sample(puertas_no_elegidas[puertas_no_elegidas != 3], size = 1)
}
eleccion_final <- eleccion == 3
if(cambiar){
puertas_restantes <- setdiff(puertas, c(eleccion, puerta_abierta))
eleccion_final <- puertas_restantes
eleccion_final <- eleccion_final == 3
}
return(eleccion_final) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
resultados <- replicate(n, montyhall(cambiar_puerta))
probabilidad_cambio <- mean(resultados)
print(probabilidad_cambio)
plot(1:n, cumsum(resultados)/(1:n), type = "l", col = "blue",
xlab = "Número de simulaciones", ylab = "Probabilidad de ganar ")
abline(h = probabilidad_cambio, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad", "Probabilidad promedio"), col = c("red", "blue"), lty = 2:1)
}
n_juegos(10000)
n_juegos(10000,FALSE)
cor(my.frame[,7:14])
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'", xlab = "Edad")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'", xlab = "Edad")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'", xlab = "Slope")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'", xlab = "Slope")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'", xlab = "Ca")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'", xlab = "Ca")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'", xlab = "Thal")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'", xlab = "Thal")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'", xlab = "Trestbps")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'", xlab = "Trestbps")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'", xlab = "Chol")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'", xlab = "Chol")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'", xlab = "Thalach")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'", xlab = "Thalach")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'", xlab = "Oldpeak")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'", xlab = "Oldpeak")
my.frame <- read.table(file = "hearth_database.csv",header = T,sep = ",", fileEncoding = "latin1")
colnames(my.frame)[colnames(my.frame) == "ï..age"] <- "age"
#slope
mean(my.frame$slope)
median(my.frame$slope)
quantile(my.frame$slope)
max(my.frame$slope)
#ca
mean(my.frame$ca)
median(my.frame$ca)
quantile(my.frame$ca)
max(my.frame$ca)
#thal
mean(my.frame$thal)
median(my.frame$thal)
quantile(my.frame$thal)
max(my.frame$thal)
#age
mean(my.frame$age)
median(my.frame$age)
quantile(my.frame$age)
max(my.frame$age)
#trestbps
mean(my.frame$trestbps)
median(my.frame$trestbps)
quantile(my.frame$trestbps)
max(my.frame$trestbps)
#chol
mean(my.frame$chol)
median(my.frame$chol)
quantile(my.frame$chol)
max(my.frame$chol)
#thalach
mean(my.frame$thalach)
median(my.frame$thalach)
quantile(my.frame$thalach)
max(my.frame$thalach)
#oldpeak
mean(my.frame$oldpeak)
median(my.frame$oldpeak)
quantile(my.frame$oldpeak)
max(my.frame$oldpeak)
#summary(my.frame)
cor(my.frame[,7:14])
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'", xlab = "Edad")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'", xlab = "Edad")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'", xlab = "Slope")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'", xlab = "Slope")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'", xlab = "Ca")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'", xlab = "Ca")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'", xlab = "Thal")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'", xlab = "Thal")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'", xlab = "Trestbps")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'", xlab = "Trestbps")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'", xlab = "Chol")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'", xlab = "Chol")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'", xlab = "Thalach")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'", xlab = "Thalach")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'", xlab = "Oldpeak")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'", xlab = "Oldpeak")
# Definición de variables o estructuras necesarias para el muestreo.
# Primero definimos la función plot_gauss, que nos permitirá graficar rápidamente.
plot_gauss <- function(x, name) {
avg <- mean(x)
std <- sd(x)
x_axis <- seq(min(x), max(x), length = length(x))
y_axis <- dnorm(x_axis, mean = avg, sd = std)
hist(x, main = sprintf("Gráfico de la distribución %s", name))
lines(x_axis, y_axis, type = "l", col = "red")
}
# Representamos las distribuciones Normal, Gamma y de Poisson, de parámetros N(1.5, 0.75), G(2, 1.5) y P(5).
avg <- 1.5
std <- 0.75
shape <- 2
scale <- 1.5
lambda <- 5
# Inicializamos los vectores que acumularán las medias para cada muestreo.
iter <- 1000
normal_vector <- vector(length = iter)
gamma_vector <- vector(length = iter)
poisson_vector <- vector(length = iter)
# Graficamos las 3 distribuciones para distintos tamaños de la muestra
sample_size <- 10
# Realizar el muestreo de las distribuciones.
for(i in 1:iter) {
new_vector <- rnorm(n = sample_size, mean = avg, sd = std)
normal_vector[i] <- mean(new_vector)
new_vector <- rgamma(n = sample_size, shape = shape, scale = scale)
gamma_vector[i] <- mean(new_vector)
new_vector <- rpois(n = sample_size, lambda = lambda)
poisson_vector[i] <- mean(new_vector)
}
# Código para gráficos
par(mfrow = c(1, 3))
plot_gauss(normal_vector, sprintf("Normal con tamaño %s", sample_size))
plot_gauss(gamma_vector, sprintf("Gamma con tamaño %s", sample_size))
plot_gauss(poisson_vector, sprintf("de Poisson con tamaño %s", sample_size))
# Graficamos las 3 distribuciones para distintos tamaños de la muestra
sample_size <- 100
# Realizar el muestreo de las distribuciones.
for(i in 1:iter) {
new_vector <- rnorm(n = sample_size, mean = avg, sd = std)
normal_vector[i] <- mean(new_vector)
new_vector <- rgamma(n = sample_size, shape = shape, scale = scale)
gamma_vector[i] <- mean(new_vector)
new_vector <- rpois(n = sample_size, lambda = lambda)
poisson_vector[i] <- mean(new_vector)
}
# Código para gráficos
par(mfrow = c(1, 3))
plot_gauss(normal_vector, sprintf("Normal con tamaño %s", sample_size))
plot_gauss(gamma_vector, sprintf("Gamma con tamaño %s", sample_size))
plot_gauss(poisson_vector, sprintf("de Poisson con tamaño %s", sample_size))
# Graficamos las 3 distribuciones para distintos tamaños de la muestra
sample_size <- 1000
# Realizar el muestreo de las distribuciones.
for(i in 1:iter) {
new_vector <- rnorm(n = sample_size, mean = avg, sd = std)
normal_vector[i] <- mean(new_vector)
new_vector <- rgamma(n = sample_size, shape = shape, scale = scale)
gamma_vector[i] <- mean(new_vector)
new_vector <- rpois(n = sample_size, lambda = lambda)
poisson_vector[i] <- mean(new_vector)
}
# Código para gráficos
par(mfrow = c(1, 3))
plot_gauss(normal_vector, sprintf("Normal con tamaño %s", sample_size))
plot_gauss(gamma_vector, sprintf("Gamma con tamaño %s", sample_size))
plot_gauss(poisson_vector, sprintf("de Poisson con tamaño %s", sample_size))
# Graficamos las 3 distribuciones para distintos tamaños de la muestra
sample_size <- 5000
# Realizar el muestreo de las distribuciones.
for(i in 1:iter) {
new_vector <- rnorm(n = sample_size, mean = avg, sd = std)
normal_vector[i] <- mean(new_vector)
new_vector <- rgamma(n = sample_size, shape = shape, scale = scale)
gamma_vector[i] <- mean(new_vector)
new_vector <- rpois(n = sample_size, lambda = lambda)
poisson_vector[i] <- mean(new_vector)
}
# Código para gráficos
par(mfrow = c(1, 3))
plot_gauss(normal_vector, sprintf("Normal con tamaño %s", sample_size))
plot_gauss(gamma_vector, sprintf("Gamma con tamaño %s", sample_size))
plot_gauss(poisson_vector, sprintf("de Poisson con tamaño %s", sample_size))
# Inicializa un vector para almacenar las probabilidades en cada paso
probabilidades <- numeric(1000)
resultados <- numeric(1000)
# Simular lanzamientos
for (lanzamientos in 1:1000) {
# Genera una secuencia de lanzamientos de la moneda y cuenta cuántas caras salieron
resultados[lanzamientos] <- sample(c("cara", "sello"), 1, replace = TRUE, prob = c(5/8, 1 - 5/8))
caras <- sum(resultados == "cara")
#print(resultados)
# Calcula la probabilidad de salir cara en este punto
probabilidad_actual <- caras / lanzamientos
probabilidades[lanzamientos] <- probabilidad_actual
}
# Gráfico de la convergencia
plot(1:1000, probabilidades, type = "l", col = "blue", xlab = "Número de intentos", ylab = "Probabilidad de salir cara")
abline(h = 5/8, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad teórica", "Probabilidad simulada"), col = c("red", "blue"), lty = 2:1)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
eleccion <- sample(1:3,1)            #Elección del participante.
puertas_no_elegidas <- setdiff(puertas, eleccion)
puertas_no_elegidas_corr <-puertas_no_elegidas[puertas_no_elegidas != 3]
if(length(puertas_no_elegidas_corr) == 1){
puerta_abierta <- puertas_no_elegidas_corr[1]
}
else{
puerta_abierta <- sample(puertas_no_elegidas[puertas_no_elegidas != 3], size = 1)
}
eleccion_final <- eleccion == 3
if(cambiar){
puertas_restantes <- setdiff(puertas, c(eleccion, puerta_abierta))
eleccion_final <- puertas_restantes
eleccion_final <- eleccion_final == 3
}
return(eleccion_final) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
resultados <- replicate(n, montyhall(cambiar_puerta))
probabilidad_cambio <- mean(resultados)
plot(1:n, cumsum(resultados)/(1:n), type = "l", col = "blue",
xlab = "Número de simulaciones", ylab = "Probabilidad de ganar ")
abline(h = probabilidad_cambio, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad", "Probabilidad promedio"), col = c("red", "blue"), lty = 2:1)
}
#Aqui vemos la diferencia entre cambiar siempre de puerta, y mantenerse siempre
n_juegos(10000)
n_juegos(10000,FALSE)
n_lan <- 1000000
# Primer experimento
dice1 <- sample(1:6, n_lan, replace = TRUE)  # Dado 1
dice2 <- sample(1:6, n_lan, replace = TRUE)  # Dado 2
favorable_a <- c(1, 2, 6)  # {1, 2, 6}
favorable_b <- c(1, 2, 3, 4)  # {1, 2, 3, 4}
favorable_ayb <- c(1, 2)  # {1, 2}
prob_axb <- vector(length = n_lan)
prob_ayb <- vector(length = n_lan)
cum_a <- 0  # |A|
cum_b <- 0  # |B|
cum_ayb <- 0  # |A∩B|
# Conteo de casos
for (i in 1:n_lan) {
a <- FALSE
b <- FALSE
if (dice1[i] %in% favorable_a) {
cum_a <- cum_a + 1
a <- TRUE
}
if (dice2[i] %in% favorable_b) {
cum_b <- cum_b + 1
b <- TRUE
}
cum_ayb <- if (a && b) (cum_ayb + 1) else cum_ayb
prob_axb[i] <- (cum_a / i) * (cum_b / i)
prob_ayb[i] <- cum_ayb / i
}
# Gráfico del experimento
plot(1, ann = FALSE, type = "n", xlim = c(0, n_lan+1), ylim = c(0, 1))
lines(seq(1, n_lan), prob_axb, col = "blue")
lines(seq(1, n_lan), prob_ayb, col = "red")
legend(8e+05, 1, legend = c("P(A)*P(B)", "P(A∩B)"), fill = c("blue", "red"))
# Segundo experimento
dice <- sample(1:6, n_lan, replace = TRUE)  # Dado
favorable_a <- c(1, 2, 6)  # {1, 2, 6}
favorable_b <- c(1, 2, 3)  # {1, 2, 3}
favorable_ayb <- c(1, 2)  # {1, 2}
prob_axb <- vector(length = n_lan)
prob_ayb <- vector(length = n_lan)
cum_a <- 0  # |A|
cum_b <- 0  # |B|
cum_ayb <- 0  # |A∩B|
# Conteo de casos
for (i in 1:n_lan) {
a <- FALSE
b <- FALSE
if (dice[i] %in% favorable_a) {
cum_a <- cum_a + 1
a <- TRUE
}
if (dice[i] %in% favorable_b) {
cum_b <- cum_b + 1
b <- TRUE
}
cum_ayb <- if (a && b) (cum_ayb + 1) else cum_ayb
prob_axb[i] <- (cum_a / i) * (cum_b / i)
prob_ayb[i] <- cum_ayb / i
}
# Gráfico del experimento
plot(1, ann = FALSE, type = "n", xlim = c(0, n_lan + 1), ylim = c(0, 1))
lines(seq(1, n_lan), prob_axb, col = "blue")
lines(seq(1, n_lan), prob_ayb, col = "red")
legend(8e+05, 1, legend = c("P(A)*P(B)", "P(A∩B)"), fill = c("blue", "red"))
# Función para obtener el desarrollo de las apuestas
ruina <- function(money = 100, bet = 5) {
vec_money <- c(money)
while (0 < money && money < 200) {
game <- as.integer(runif(1, 1, 19))
sign <- if (game <= 8) 1 else -1
money <- money + sign * bet
vec_money <- append(vec_money, money)
}
return(vec_money)
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(bet = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(bet = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
n_bet <- 5000
bet5_vector <- vector(length = n_bet)
bet20_vector <- vector(length = n_bet)
bet50_vector <- vector(length = n_bet)
for (i in 1:n_bet) {
final5_money <- tail(ruina(bet = 5), 1)
final20_money <- tail(ruina(bet = 20), 1)
final50_money <- tail(ruina(bet = 50), 1)
win5 <- if (final5_money <= 0) 0 else 1
win20 <- if (final20_money <= 0) 0 else 1
win50 <- if (final50_money <= 0) 0 else 1
bet5_vector[i] <- win5
bet20_vector[i] <- win20
bet50_vector[i] <- win50
}
t5 <- table(bet5_vector)
t20 <- table(bet20_vector)
t50 <- table(bet50_vector)
print(sprintf("Apuesta = 5 -> E = %d, F = %d, Prob = %f", t5["1"], t5["0"], t5["1"]/(t5["1"] + t5["0"])))
hist(bet5_vector, main = sprintf("Éxitos y fracasos para apuesta = 5"))
print(sprintf("Apuesta = 20 -> E = %d, F = %d, Prob = %f", t20["1"], t20["0"], t20["1"]/(t20["1"] + t20["0"])))
hist(bet20_vector, main = sprintf("Éxitos y fracasos para apuesta = 20"))
print(sprintf("Apuesta = 50 -> E = %d, F = %d, Prob = %f", t50["1"], t50["0"], t50["1"]/(t50["1"] + t50["0"])))
hist(bet50_vector, main = sprintf("Éxitos y fracasos para apuesta = 50"))
library(tidyverse)
detach("package:tidyverse", unload = TRUE)
