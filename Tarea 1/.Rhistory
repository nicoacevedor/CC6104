return(eleccion_final) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
resultados <- replicate(n, montyhall(cambiar_puerta))
probabilidad_cambio <- mean(resultados)
print(probabilidad_cambio)
plot(1:n, cumsum(resultados)/(1:n), type = "l", col = "blue",
xlab = "Número de simulaciones", ylab = "Probabilidad de ganar ")
abline(h = probabilidad_cambio, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad", "Probabilidad promedio"), col = c("red", "blue"), lty = 2:1)
}
n_juegos(10)
n_juegos(10,FALSE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
eleccion <- sample(1:3,1)            #Elección del participante.
puertas_no_elegidas <- setdiff(puertas, eleccion)
#print(sprintf("eleccion: %s",eleccion))
puertas_no_elegidas_corr <-puertas_no_elegidas[puertas_no_elegidas != 3]
#print(sprintf("puertas_no_elegidas_corr: %s",puertas_no_elegidas_corr))
if(length(puertas_no_elegidas_corr) == 1){
puerta_abierta <- puertas_no_elegidas_corr[1]
}
else{
puerta_abierta <- sample(puertas_no_elegidas[puertas_no_elegidas != 3], size = 1)
}
#print(sprintf("puerta_abierta: %s",puerta_abierta))
eleccion_final <- eleccion == 3
if(cambiar){
puertas_restantes <- setdiff(puertas, c(eleccion, puerta_abierta))
#print(sprintf("puertas_restantes: %s",puertas_restantes))
eleccion_final <- puertas_restantes
eleccion_final <- puertas[eleccion_final] == 3
}
return(eleccion_final) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
resultados <- replicate(n, montyhall(cambiar_puerta))
probabilidad_cambio <- mean(resultados)
print(probabilidad_cambio)
plot(1:n, cumsum(resultados)/(1:n), type = "l", col = "blue",
xlab = "Número de simulaciones", ylab = "Probabilidad de ganar ")
abline(h = probabilidad_cambio, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad", "Probabilidad promedio"), col = c("red", "blue"), lty = 2:1)
}
n_juegos(10000)
n_juegos(10000,FALSE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
eleccion <- sample(1:3,1)            #Elección del participante.
puertas_no_elegidas <- setdiff(puertas, eleccion)
#print(sprintf("eleccion: %s",eleccion))
puertas_no_elegidas_corr <-puertas_no_elegidas[puertas_no_elegidas != 3]
#print(sprintf("puertas_no_elegidas_corr: %s",puertas_no_elegidas_corr))
if(length(puertas_no_elegidas_corr) == 1){
puerta_abierta <- puertas_no_elegidas_corr[1]
}
else{
puerta_abierta <- sample(puertas_no_elegidas[puertas_no_elegidas != 3], size = 1)
}
#print(sprintf("puerta_abierta: %s",puerta_abierta))
eleccion_final <- eleccion == 3
if(cambiar){
puertas_restantes <- setdiff(puertas, c(eleccion, puerta_abierta))
#print(sprintf("puertas_restantes: %s",puertas_restantes))
eleccion_final <- puertas_restantes
eleccion_final <- puertas[eleccion_final] == 3
}
return(eleccion_final) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
resultados <- replicate(n, montyhall(cambiar_puerta))
probabilidad_cambio <- mean(resultados)
print(probabilidad_cambio)
plot(1:n, cumsum(resultados)/(1:n), type = "l", col = "blue",
xlab = "Número de simulaciones", ylab = "Probabilidad de ganar ")
abline(h = probabilidad_cambio, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad", "Probabilidad promedio"), col = c("red", "blue"), lty = 2:1)
}
n_juegos(10000)
n_juegos(10000,FALSE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
eleccion <- sample(1:3,1)            #Elección del participante.
puertas_no_elegidas <- setdiff(puertas, eleccion)
print(sprintf("eleccion: %s",eleccion))
puertas_no_elegidas_corr <-puertas_no_elegidas[puertas_no_elegidas != 3]
print(sprintf("puertas_no_elegidas_corr: %s",puertas_no_elegidas_corr))
if(length(puertas_no_elegidas_corr) == 1){
puerta_abierta <- puertas_no_elegidas_corr[1]
}
else{
puerta_abierta <- sample(puertas_no_elegidas[puertas_no_elegidas != 3], size = 1)
}
print(sprintf("puerta_abierta: %s",puerta_abierta))
eleccion_final <- eleccion == 3
if(cambiar){
puertas_restantes <- setdiff(puertas, c(eleccion, puerta_abierta))
print(sprintf("puertas_restantes: %s",puertas_restantes))
eleccion_final <- puertas_restantes
eleccion_final <- puertas[eleccion_final] == 3
}
return(eleccion_final) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
resultados <- replicate(n, montyhall(cambiar_puerta))
probabilidad_cambio <- mean(resultados)
print(probabilidad_cambio)
plot(1:n, cumsum(resultados)/(1:n), type = "l", col = "blue",
xlab = "Número de simulaciones", ylab = "Probabilidad de ganar ")
abline(h = probabilidad_cambio, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad", "Probabilidad promedio"), col = c("red", "blue"), lty = 2:1)
}
n_juegos(10)
n_juegos(10,FALSE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
eleccion <- sample(1:3,1)            #Elección del participante.
puertas_no_elegidas <- setdiff(puertas, eleccion)
print(sprintf("eleccion: %s",eleccion))
puertas_no_elegidas_corr <-puertas_no_elegidas[puertas_no_elegidas != 3]
print(sprintf("puertas_no_elegidas_corr: %s",puertas_no_elegidas_corr))
if(length(puertas_no_elegidas_corr) == 1){
puerta_abierta <- puertas_no_elegidas_corr[1]
}
else{
puerta_abierta <- sample(puertas_no_elegidas[puertas_no_elegidas != 3], size = 1)
}
print(sprintf("puerta_abierta: %s",puerta_abierta))
eleccion_final <- eleccion == 3
if(cambiar){
puertas_restantes <- setdiff(puertas, c(eleccion, puerta_abierta))
print(sprintf("puertas_restantes: %s",puertas_restantes))
eleccion_final <- puertas_restantes
eleccion_final <- puertas[eleccion_final] == 3
}
return(eleccion_final) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
resultados <- replicate(n, montyhall(cambiar_puerta))
probabilidad_cambio <- mean(resultados)
print(probabilidad_cambio)
plot(1:n, cumsum(resultados)/(1:n), type = "l", col = "blue",
xlab = "Número de simulaciones", ylab = "Probabilidad de ganar ")
abline(h = probabilidad_cambio, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad", "Probabilidad promedio"), col = c("red", "blue"), lty = 2:1)
}
n_juegos(10)
n_juegos(10,FALSE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
eleccion <- sample(1:3,1)            #Elección del participante.
puertas_no_elegidas <- setdiff(puertas, eleccion)
print(sprintf("eleccion: %s",eleccion))
puertas_no_elegidas_corr <-puertas_no_elegidas[puertas_no_elegidas != 3]
print(sprintf("puertas_no_elegidas_corr: %s",puertas_no_elegidas_corr))
if(length(puertas_no_elegidas_corr) == 1){
puerta_abierta <- puertas_no_elegidas_corr[1]
}
else{
puerta_abierta <- sample(puertas_no_elegidas[puertas_no_elegidas != 3], size = 1)
}
print(sprintf("puerta_abierta: %s",puerta_abierta))
eleccion_final <- eleccion == 3
if(cambiar){
puertas_restantes <- setdiff(puertas, c(eleccion, puerta_abierta))
print(sprintf("puertas_restantes: %s",puertas_restantes))
eleccion_final <- puertas_restantes
eleccion_final <- puertas[eleccion_final] == 3
}
return(eleccion_final) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
resultados <- replicate(n, montyhall(cambiar_puerta))
probabilidad_cambio <- mean(resultados)
print(probabilidad_cambio)
plot(1:n, cumsum(resultados)/(1:n), type = "l", col = "blue",
xlab = "Número de simulaciones", ylab = "Probabilidad de ganar ")
abline(h = probabilidad_cambio, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad", "Probabilidad promedio"), col = c("red", "blue"), lty = 2:1)
}
n_juegos(10)
#n_juegos(10,FALSE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
eleccion <- sample(1:3,1)            #Elección del participante.
puertas_no_elegidas <- setdiff(puertas, eleccion)
print(sprintf("eleccion: %s",eleccion))
puertas_no_elegidas_corr <-puertas_no_elegidas[puertas_no_elegidas != 3]
print(sprintf("puertas_no_elegidas_corr: %s",puertas_no_elegidas_corr))
if(length(puertas_no_elegidas_corr) == 1){
puerta_abierta <- puertas_no_elegidas_corr[1]
}
else{
puerta_abierta <- sample(puertas_no_elegidas[puertas_no_elegidas != 3], size = 1)
}
print(sprintf("puerta_abierta: %s",puerta_abierta))
eleccion_final <- eleccion == 3
if(cambiar){
puertas_restantes <- setdiff(puertas, c(eleccion, puerta_abierta))
print(sprintf("puertas_restantes: %s",puertas_restantes))
eleccion_final <- puertas_restantes
eleccion_final <- eleccion_final == 3
}
return(eleccion_final) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
resultados <- replicate(n, montyhall(cambiar_puerta))
probabilidad_cambio <- mean(resultados)
print(probabilidad_cambio)
plot(1:n, cumsum(resultados)/(1:n), type = "l", col = "blue",
xlab = "Número de simulaciones", ylab = "Probabilidad de ganar ")
abline(h = probabilidad_cambio, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad", "Probabilidad promedio"), col = c("red", "blue"), lty = 2:1)
}
n_juegos(10)
#n_juegos(10,FALSE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
eleccion <- sample(1:3,1)            #Elección del participante.
puertas_no_elegidas <- setdiff(puertas, eleccion)
#print(sprintf("eleccion: %s",eleccion))
puertas_no_elegidas_corr <-puertas_no_elegidas[puertas_no_elegidas != 3]
#print(sprintf("puertas_no_elegidas_corr: %s",puertas_no_elegidas_corr))
if(length(puertas_no_elegidas_corr) == 1){
puerta_abierta <- puertas_no_elegidas_corr[1]
}
else{
puerta_abierta <- sample(puertas_no_elegidas[puertas_no_elegidas != 3], size = 1)
}
#print(sprintf("puerta_abierta: %s",puerta_abierta))
eleccion_final <- eleccion == 3
if(cambiar){
puertas_restantes <- setdiff(puertas, c(eleccion, puerta_abierta))
#print(sprintf("puertas_restantes: %s",puertas_restantes))
eleccion_final <- puertas_restantes
eleccion_final <- eleccion_final == 3
}
return(eleccion_final) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
resultados <- replicate(n, montyhall(cambiar_puerta))
probabilidad_cambio <- mean(resultados)
print(probabilidad_cambio)
plot(1:n, cumsum(resultados)/(1:n), type = "l", col = "blue",
xlab = "Número de simulaciones", ylab = "Probabilidad de ganar ")
abline(h = probabilidad_cambio, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad", "Probabilidad promedio"), col = c("red", "blue"), lty = 2:1)
}
n_juegos(10000)
#n_juegos(10,FALSE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
eleccion <- sample(1:3,1)            #Elección del participante.
puertas_no_elegidas <- setdiff(puertas, eleccion)
#print(sprintf("eleccion: %s",eleccion))
puertas_no_elegidas_corr <-puertas_no_elegidas[puertas_no_elegidas != 3]
#print(sprintf("puertas_no_elegidas_corr: %s",puertas_no_elegidas_corr))
if(length(puertas_no_elegidas_corr) == 1){
puerta_abierta <- puertas_no_elegidas_corr[1]
}
else{
puerta_abierta <- sample(puertas_no_elegidas[puertas_no_elegidas != 3], size = 1)
}
#print(sprintf("puerta_abierta: %s",puerta_abierta))
eleccion_final <- eleccion == 3
if(cambiar){
puertas_restantes <- setdiff(puertas, c(eleccion, puerta_abierta))
#print(sprintf("puertas_restantes: %s",puertas_restantes))
eleccion_final <- puertas_restantes
eleccion_final <- eleccion_final == 3
}
return(eleccion_final) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
resultados <- replicate(n, montyhall(cambiar_puerta))
probabilidad_cambio <- mean(resultados)
print(probabilidad_cambio)
plot(1:n, cumsum(resultados)/(1:n), type = "l", col = "blue",
xlab = "Número de simulaciones", ylab = "Probabilidad de ganar ")
abline(h = probabilidad_cambio, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad", "Probabilidad promedio"), col = c("red", "blue"), lty = 2:1)
}
n_juegos(10000)
n_juegos(10000,FALSE)
# Creamos una función que simule el juego
montyhall <- function(cambiar = TRUE){
puertas <- sample(1:3,3)             #Puertas donde la posición que tiene el 3 es el premio
eleccion <- sample(1:3,1)            #Elección del participante.
puertas_no_elegidas <- setdiff(puertas, eleccion)
puertas_no_elegidas_corr <-puertas_no_elegidas[puertas_no_elegidas != 3]
if(length(puertas_no_elegidas_corr) == 1){
puerta_abierta <- puertas_no_elegidas_corr[1]
}
else{
puerta_abierta <- sample(puertas_no_elegidas[puertas_no_elegidas != 3], size = 1)
}
eleccion_final <- eleccion == 3
if(cambiar){
puertas_restantes <- setdiff(puertas, c(eleccion, puerta_abierta))
eleccion_final <- puertas_restantes
eleccion_final <- eleccion_final == 3
}
return(eleccion_final) # Retornamos la elección, esta puede que tenga el premio o no
}
# Función que simula N juegos
n_juegos <- function(n = 10 ,cambiar_puerta = TRUE){
resultados <- replicate(n, montyhall(cambiar_puerta))
probabilidad_cambio <- mean(resultados)
print(probabilidad_cambio)
plot(1:n, cumsum(resultados)/(1:n), type = "l", col = "blue",
xlab = "Número de simulaciones", ylab = "Probabilidad de ganar ")
abline(h = probabilidad_cambio, col = "red", lty = 2)
legend("topright", legend = c("Probabilidad", "Probabilidad promedio"), col = c("red", "blue"), lty = 2:1)
}
n_juegos(10000)
n_juegos(10000,FALSE)
cor(my.frame[,7:14])
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
#boxplot(my.frame[,7:14],main="Hearth")
boxplot(my.frame$slope,main="Hearth slope")
boxplot(my.frame$ca,main="Hearth ca")
boxplot(my.frame$thal,main="Hearth thal")
boxplot(my.frame$age,main="Hearth age")
boxplot(my.frame$trestbps,main="Hearth trestbps")
boxplot(my.frame$chol,main="Hearth chol")
boxplot(my.frame$thalach,main="Hearth thalach")
boxplot(my.frame$oldpeak,main="Hearth oldpeak")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'")
hist(my.frame$age[my.frame$target == "YES"],main="Distribución de Edad para 'YES'", xlab = "Edad")
hist(my.frame$age[my.frame$target == "NO"],main="Distribución de Edad para 'NO'", xlab = "Edad")
hist(my.frame$slope[my.frame$target == "YES"],main="Distribución de slope para 'YES'", xlab = "Slope")
hist(my.frame$slope[my.frame$target == "NO"],main="Distribución de slope para 'NO'", xlab = "Slope")
hist(my.frame$ca[my.frame$target == "YES"],main="Distribución de ca para 'YES'", xlab = "Ca")
hist(my.frame$ca[my.frame$target == "NO"],main="Distribución de ca para 'NO'", xlab = "Ca")
hist(my.frame$thal[my.frame$target == "YES"],main="Distribución de thal para 'YES'", xlab = "Thal")
hist(my.frame$thal[my.frame$target == "NO"],main="Distribución de thal para 'NO'", xlab = "Thal")
hist(my.frame$trestbps[my.frame$target == "YES"],main="Distribución de trestbps para 'YES'", xlab = "Trestbps")
hist(my.frame$trestbps[my.frame$target == "NO"],main="Distribución de trestbps para 'NO'", xlab = "Trestbps")
hist(my.frame$chol[my.frame$target == "YES"],main="Distribución de chol para 'YES'", xlab = "Chol")
hist(my.frame$chol[my.frame$target == "NO"],main="Distribución de chol para 'NO'", xlab = "Chol")
hist(my.frame$thalach[my.frame$target == "YES"],main="Distribución de thalach para 'YES'", xlab = "Thalach")
hist(my.frame$thalach[my.frame$target == "NO"],main="Distribución de thalach para 'NO'", xlab = "Thalach")
hist(my.frame$oldpeak[my.frame$target == "YES"],main="Distribución de oldpeak para 'YES'", xlab = "Oldpeak")
hist(my.frame$oldpeak[my.frame$target == "NO"],main="Distribución de oldpeak para 'NO'", xlab = "Oldpeak")
